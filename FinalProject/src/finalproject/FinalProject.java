////////////////////////////////////////////////////////////////////////////////
// Title:            Reservations
// Files:            (Appointmentlist of source files)
// Semester:         COP3337 Fall 2015
//
// Author:           1657691
// Lecturer's Name:  Cristy Charters
//
// Implementing Linked Appointmentlist and queue 
//
////////////////////////////////////////////////////////////////////////////////
package finalproject;

import javax.swing.JOptionPane;

/**
 *
 * @author
 */
public class FinalProject extends javax.swing.JFrame {

    boolean ok;
    private MyLinkedList AppointmentsList;
    private MyLinkedList.LinkedListIterator myIterator;
    private MyLinkedQueue WaitingList;

    /**
     * Constructor
     */
    public FinalProject() {
        initComponents();
        setResizable(false);
        AppDialog.setModal(true);
        AppDialog.pack();
        AppDialog.setLocationRelativeTo(this);
        ChangeDialog.setModal(true);
        ChangeDialog.pack();
        ChangeDialog.setLocationRelativeTo(this);
        AppointmentsList = new MyLinkedList();
        myIterator = AppointmentsList.listIterator();
        WaitingList = new MyLinkedQueue();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AppDialog = new javax.swing.JDialog();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        ChangeDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jFormattedTextField3 = new javax.swing.JFormattedTextField();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        AppDialog.setTitle("Appointment");
        AppDialog.setSize(getPreferredSize());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9", "10", "11", "12", "13", "14", "15" }));

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("First name ");

        jLabel2.setText("Last name");

        jLabel3.setText("Date (yyyy mm dd)");

        jLabel4.setText("Time (military time)");

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy MM dd"))));

        javax.swing.GroupLayout AppDialogLayout = new javax.swing.GroupLayout(AppDialog.getContentPane());
        AppDialog.getContentPane().setLayout(AppDialogLayout);
        AppDialogLayout.setHorizontalGroup(
            AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppDialogLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AppDialogLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AppDialogLayout.createSequentialGroup()
                        .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addGap(25, 25, 25)
                        .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jFormattedTextField1))))
                .addGap(34, 34, 34))
        );
        AppDialogLayout.setVerticalGroup(
            AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppDialogLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        ChangeDialog.setTitle("Change an appointment's schedule");
        ChangeDialog.setModal(true);
        ChangeDialog.setResizable(false);

        jLabel5.setText("Name");

        jLabel6.setText("Last name");

        jLabel7.setText("Old Time (military time)");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9", "10", "11", "12", "13", "14", "15" }));

        jLabel8.setText("Old Date (yyyy mm dd)");

        jLabel9.setText("New Time (military time)");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9", "10", "11", "12", "13", "14", "15" }));

        jLabel10.setText("New Date (yyyy mm dd)");

        jButton9.setText("Ok");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Cancel");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy MM dd"))));

        jFormattedTextField3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy MM dd"))));

        javax.swing.GroupLayout ChangeDialogLayout = new javax.swing.GroupLayout(ChangeDialog.getContentPane());
        ChangeDialog.getContentPane().setLayout(ChangeDialogLayout);
        ChangeDialogLayout.setHorizontalGroup(
            ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChangeDialogLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChangeDialogLayout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ChangeDialogLayout.createSequentialGroup()
                        .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFormattedTextField3)
                            .addComponent(jFormattedTextField2)
                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(ChangeDialogLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38))
        );
        ChangeDialogLayout.setVerticalGroup(
            ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChangeDialogLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jFormattedTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPopupMenu1.setMaximumSize(new java.awt.Dimension(100, 100));
        jPopupMenu1.setMinimumSize(new java.awt.Dimension(100, 100));

        jMenuItem1.setText("Change appointment");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Cancel appointment");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dr Alfonso appointments");
        setResizable(false);

        jButton3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\add.png")); // NOI18N
        jButton3.setToolTipText("Adds new appointment to the list, if the schedule is unavailable then adds it to the waiting list");
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setLabel("New App");
        jButton3.setName(""); // NOI18N
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\edit.png")); // NOI18N
        jButton4.setText("Change");
        jButton4.setToolTipText("Change a person's appointment to a new schedule");
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\delete.png")); // NOI18N
        jButton5.setToolTipText("Cancels an appointment from the list");
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setLabel("Cancel");
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\search.png")); // NOI18N
        jButton6.setText("Search Ap.");
        jButton6.setToolTipText("Searches an appointment in the list");
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\waiting.png")); // NOI18N
        jButton7.setToolTipText("Extracts an appointment from the waiting list to add it to the appointment list. The appointment could be modified");
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setLabel("Process");
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\Exit.png")); // NOI18N
        jButton8.setToolTipText("Exits the application");
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setLabel("Exit");
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Last", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("Right click for popup menu options");
        jTable1.setComponentPopupMenu(jPopupMenu1);
        jTable1.setName(""); // NOI18N
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Last", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
        }

        jButton11.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\search person.png")); // NOI18N
        jButton11.setText("Search Pe.");
        jButton11.setToolTipText("Searches a person has an appointment");
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ronny\\Documents\\NetBeansProjects\\Java\\FinalProject\\src\\images\\search schedule.png")); // NOI18N
        jButton12.setText("Search Sc.");
        jButton12.setToolTipText("Searches if a schedule is available");
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Appointment list");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Waiting list");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(384, 384, 384)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        setSize(new java.awt.Dimension(788, 423));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    /**
     * The OK button from the dialog box 1
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (valid_AppDlg()) {
            ok = true;
            AppDialog.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Please, fill the required fields", "Data incomplete", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * The Cancel button from the dialog box 2
     *
     * @param evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ok = false;
        AppDialog.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * OK button dialog 2
     *
     * @param evt
     */
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (valid_ChangeAppDlg()) {
            ok = true;
            ChangeDialog.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Please, fill the required fields", "Data incomplete", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * Cancel button dialog 2
     *
     * @param evt
     */
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        ok = false;
        ChangeDialog.setVisible(false);
    }//GEN-LAST:event_jButton10ActionPerformed
    
    /**
     * Tries to make new appointment if success then show a msg and adds it 
     * to the appointments linked Appointment list if
     * fails to make the appointment then is inserted in the queue and show a
     * msg also
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ok = false;                                                             // init ok
        cleanAppDlg();                                                            // clean the dialog form
        AppDialog.setTitle("New appointment");                                   // Change dialog title
        AppDialog.setVisible(true);                                              // show dialog
        if (ok) {                                                               // pressed ok?                                         // validates
            Appointment anApp = getDlgAppointment();                            // get the appointment in a variable
            if (myIterator.makeAppointment(anApp)) {                            // get dialog data and make an appointment
                updatePanels();                                                 // update before msg
                JOptionPane.showMessageDialog(null, "Appointment " + anApp.toString() + " was scheduled successfully", "Reservation", JOptionPane.INFORMATION_MESSAGE);
            } else {                                                            // schedule unavailable
                WaitingList.addToWaitingList(anApp);                            // added to the waiting list
                updatePanels();                                                 // update panels and then msg
                JOptionPane.showMessageDialog(null, "The desired scheduled for " + anApp.toString() + " was not available and was added to the waiting list", "Waiting list", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Extracts an appointment from the waiting Appointment list and 
     * fills the dialog box with the first element of the queue
     * if press cancel inserts enqueue the app back to the queue
     * if press OK then tries to make a reservation if fails then sends the appointment back to
     * the waiting list
     *
     * @param evt
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (!WaitingList.empty()) {
            Appointment anApp = WaitingList.dequeue();                          // dequeue
            updatePanels();                                                     // update panels
            setDlgAppointment(anApp);                                           // fill the fields in the dialog
            ok = false;                                                         // init ok
            AppDialog.setTitle("Processing appointment");                       // Change dialog title
            AppDialog.setVisible(true);                                         // dialog
            if (ok) {                                                           // pressed ok?
                if (myIterator.makeAppointment(getDlgAppointment())) {          // get dialog data and make an appointment
                    updatePanels();                                             // update before msg
                    JOptionPane.showMessageDialog(null, "Appointment " + anApp.toString() + " was successfully rescheduled", "Reservation", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    WaitingList.addToWaitingList(getDlgAppointment());          // the appointment is added to the waiting list
                    updatePanels();                                             // update panels and then msg   
                    JOptionPane.showMessageDialog(null, "The desired scheduled for " + anApp.toString() + " was not available and was added to the waiting list again", "Waiting list", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {                                                            // pressed cancel
                WaitingList.addToWaitingList(getDlgAppointment());              // the appointment is added back to the waiting list
                updatePanels();                                                 // update panels and then msg   
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.toString() + " is back to the waiting list", "Waiting list", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {                                                                //waiting list empty                                                                                                                      // if the waiting list is empty
            JOptionPane.showMessageDialog(null, "The waiting list is empty", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * Change the schedule of an appointment
     *
     * @param evt
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ok = false;                                                             // init ok
        Appointment oldApp;                                                     // creating the variable for the ap to be changed
        if (evt.getSource()==jMenuItem1){                                       // is comming from the popopup menu?
            oldApp = getAppfromTable();                                         // get the app from the table
            if (oldApp!=null) setDlgChangeApp(oldApp);                          // fills the dialog's fields with the appointment in the jtable 
            else cleanChangeDlg();                                              // clean the dialog
        }
        if (evt.getSource()==jButton4) cleanChangeDlg();                        // comming from the button, clean the dialog form
        ChangeDialog.setVisible(true);                                          // show dialog box
        if (ok) {                                                               // pressed ok?
            oldApp = getDlgOldAppointment();                                    // get the old appointment
            if (myIterator.replaceAppointment(oldApp)) {                        // if found the appointment
                Appointment newApp = getDlgNewAppointment();                    // get the new appointment
                if (myIterator.makeAppointment(newApp)) {                       // remove the appointment
                    updatePanels();                                             // update panels and then msg
                    JOptionPane.showMessageDialog(null, "Appointment successfully rescheduled for " + newApp.toString(), "Change appointment", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    WaitingList.addToWaitingList(newApp);                       // added to the waiting list
                    updatePanels();                                             // update panels and then msg
                    JOptionPane.showMessageDialog(null, "The desired scheduled for " + newApp.toString() + " was not available and was added to the waiting list", "Waiting list", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "The appointment for " + oldApp.toString() + " was not found", "Changing appointment", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Cancels an existing appointment the appointment has to match all the
     * fields
     *
     * @param evt
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ok = false;                                                             // init ok
        AppDialog.setTitle("Cancel appointment");                               // Change dialog title
        Appointment anApp;                                                      // create variable
        if (evt.getSource()==jMenuItem2){                                       // is comming from the popopup menu? and cel sellected
            anApp = getAppfromTable();                                          // get the appointment from the table
            if (anApp!=null) setDlgAppointment(anApp);                          // fills the dialog's fields with the appointment in the jtable 
            else cleanAppDlg();                                                 // else clean dialog
        } 
        if (evt.getSource()==jButton5) cleanAppDlg();                           // comming from the button, clean the dialog form
        AppDialog.setVisible(true);                                             // show dialog box
        if (ok) {                                                               // pressed ok?
            myIterator.setFirst();                                              // from the beginning
            anApp = getDlgAppointment();                                        // get the appointment in a variable
            if (myIterator.replaceAppointment(anApp)) {                         // cancel the appointment
                updatePanels();                                                 // update the panels before msg
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.toString() + " was cancelled successfully", "Cancel appointment", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.toString() + " was not found", "Cancel appointment", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    
    /**
     * Checks if an appointment is registered
     *
     * @param evt
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ok = false;                                                             // init ok
        cleanAppDlg();                                                          // clean the dialog form
        AppDialog.setTitle("Search appointment");                               // Change dialog title
        AppDialog.setVisible(true);                                             // show dialog box
        if (ok) {                                                               // pressed ok?
            Appointment anApp = getDlgAppointment();                            // get the appointment in a variable
            if (myIterator.find(anApp, new ByAllFieldsComp()) != null) {        // if found or not then msg
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.toString() + " is registered", "Search result", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.toString() + " is not registered", "Search result", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * Search a person in the appointment list
     * @param evt 
     */
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        ok = false;                                                             // init ok
        cleanAppDlg();                                                          // clean the dialog form
        AppDialog.setTitle("Search a person");                                  // Change dialog title
        jFormattedTextField1.setText("Not needed");                             // only need 
        jFormattedTextField1.setEnabled(false);                                 // name
        jComboBox1.setEnabled(false);                                           // and last name
        AppDialog.setVisible(true);                                             // show dialog box
        jFormattedTextField1.setText("");                                       // put it back 
        jFormattedTextField1.setEnabled(true);                                  // put it back
        jComboBox1.setEnabled(true);                                            // put it back
        if (ok) {                                                               // pressed ok?
            Appointment anApp = getDlgAppointment();                            // get the appointment in a variable
            if (myIterator.find(anApp, new ByNameComp()) != null) {             // if found or not then msg
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.getFullName()+ " is registered", "Search result", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.getFullName()+ " is not registered", "Search result", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * Search if a schedule is available
     * @param evt 
     */
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        ok = false;                                                             // init ok
        cleanAppDlg();                                                          // clean the dialog form
        AppDialog.setTitle("Search schedule");                                  // Change dialog title
        jTextField1.setText("Not needed");                                      // name not needed 
        jTextField2.setText("Not needed");                                      // last not needed 
        jTextField1.setEnabled(false);                                          // disabling it
        jTextField2.setEnabled(false);                                          // disabling it 
        AppDialog.setVisible(true);                                             // show dialog box
        jTextField1.setEnabled(true);                                           // enabling it
        jTextField2.setEnabled(true);                                           // enabling it 
        if (ok) {                                                               // pressed ok?
            Appointment anApp = getDlgAppointment();                            // get the appointment in a variable
            if (myIterator.find(anApp, new ByScheduleComp()) != null) {         // if found or not then msg
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.getSchedule()+ " is not available", "Search result", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "The appointment for " + anApp.getSchedule()+ " is available", "Search result", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    /**
     * Updates both components with the values of the lists
     */
    private void updatePanels() {
        myIterator.getAppointmentrows(jTable1);
        WaitingList.getAppointments(jTable2);
    }

    /**
     * Validates that all the data is entered in the dialog box 1
     *
     * @return true if all are filled
     */
    private boolean valid_AppDlg() {
        return !jTextField1.getText().trim().equalsIgnoreCase("")
                && !jTextField2.getText().trim().equalsIgnoreCase("")
                && !jFormattedTextField1.getText().trim().equalsIgnoreCase("");
    }

    /**
     * Validates that all the data is entered in the dialog box 2
     *
     * @return true if all are filled
     */
    private boolean valid_ChangeAppDlg() {
        return !jTextField3.getText().trim().equalsIgnoreCase("")
                && !jTextField4.getText().trim().equalsIgnoreCase("")
                && !jFormattedTextField3.getText().trim().equalsIgnoreCase("")
                && !jFormattedTextField2.getText().trim().equalsIgnoreCase("");
    }
    
    /**
     * Fills the dialog's fields from the selected row of the list of appointments
     * @return 
     */
    private Appointment getAppfromTable() {
        int index = jTable1.getSelectedRow();
        if (index>=0){
            return new Appointment( jTable1.getValueAt(index,0).toString(),  // name
                                    jTable1.getValueAt(index,1).toString(),  // last    
                                    jTable1.getValueAt(index,2).toString(),  // date
                                    Integer.valueOf(jTable1.getValueAt(index,3).toString().trim()));// time
        } else return null;
    }
    

    /**
     * Gets the appointment entered in the Dialog box
     *
     * @return the Appointment
     */
    private Appointment getDlgAppointment() {
        return new Appointment(formatNames(jTextField1.getText().trim()),
                formatNames(jTextField2.getText().trim()),
                jFormattedTextField1.getText().trim(),
                Integer.valueOf((String) jComboBox1.getSelectedItem()));
    }

    /**
     * Gets the old appointment entered in the Dialog box 2
     *
     * @return the old Appointment
     */
    private Appointment getDlgOldAppointment() {
        return new Appointment(formatNames(jTextField3.getText().trim()),
                formatNames(jTextField4.getText().trim()),
                jFormattedTextField2.getText().trim(),
                Integer.valueOf((String) jComboBox2.getSelectedItem()));
    }

    /**
     * Gets the new appointment entered in the Dialog box 2
     *
     * @return the new Appointment
     */
    private Appointment getDlgNewAppointment() {
        return new Appointment( formatNames(jTextField3.getText().trim()),
                                formatNames(jTextField4.getText().trim()),
                                jFormattedTextField3.getText(),
                                Integer.valueOf((String) jComboBox3.getSelectedItem()));
    }

    /**
     * Fills the field of the appointment dialog box from an appointment
     *
     * @param the Appointment
     */
    private void setDlgAppointment(Appointment anApp) {
        jTextField1.setText(anApp.getName());
        jTextField2.setText(anApp.getLast());
        jFormattedTextField1.setText(anApp.getDate());
        jComboBox1.setSelectedItem(String.valueOf(anApp.getTime()));
    }

    /**
     * Fills the change appointment dialog's fields from an appointment
     * @param appfromTable 
     */
    private void setDlgChangeApp(Appointment anApp) {
        jTextField3.setText(anApp.getName());
        jTextField4.setText(anApp.getLast());
        jFormattedTextField2.setText(anApp.getDate());
        jComboBox2.setSelectedItem(String.valueOf(anApp.getTime()));
    }
    
    /**
     * CLeans the components in the dialog 1
     */
    private void cleanAppDlg() {
        jTextField1.setText("");
        jTextField2.setText("");
        jFormattedTextField2.setText("");
        jComboBox1.setSelectedIndex(0);
    }

    /**
     * CLeans the components in the dialog 2
     */
    private void cleanChangeDlg() {
        jTextField3.setText("");
        jTextField4.setText("");
        jFormattedTextField2.setText("");
        jComboBox2.setSelectedIndex(0);
        jFormattedTextField3.setText("");
        jComboBox3.setSelectedIndex(0);
    }
    
    /**
     * Formats the string to the first letter in uppercase and the rest in lowercase
     * @param the name to be formatted
     * @return the name formatted
     */
    private String formatNames(String name){
        return name.substring(0,1).toUpperCase() + name.substring(1).toLowerCase();
    } 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        
        /**
         * using the console
         */
        ConsoleAppClass consoleDemo = new ConsoleAppClass();
        consoleDemo.excecute();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        @Override
        public void run() {
        new FinalProject().setVisible(true);
        }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AppDialog;
    private javax.swing.JDialog ChangeDialog;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JFormattedTextField jFormattedTextField3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    

    

}
